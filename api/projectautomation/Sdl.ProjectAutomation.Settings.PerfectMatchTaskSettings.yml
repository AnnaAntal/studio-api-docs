### YamlMime:ManagedReference
items:
- uid: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings
  commentId: T:Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings
  id: PerfectMatchTaskSettings
  parent: Sdl.ProjectAutomation.Settings
  children:
  - Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.#ctor
  - Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  langs:
  - csharp
  - vb
  name: PerfectMatchTaskSettings
  nameWithType: PerfectMatchTaskSettings
  fullName: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings
  type: Class
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nSettings group class for the Perfect Match automatic task settings.\n"
  syntax:
    content: 'public class PerfectMatchTaskSettings : SettingsGroup'
    content.vb: >-
      Public Class PerfectMatchTaskSettings

          Inherits SettingsGroup
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.#ctor
  commentId: M:Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.#ctor
  id: '#ctor'
  parent: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings
  langs:
  - csharp
  - vb
  name: PerfectMatchTaskSettings()
  nameWithType: PerfectMatchTaskSettings.PerfectMatchTaskSettings()
  fullName: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.PerfectMatchTaskSettings()
  type: Constructor
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  syntax:
    content: public PerfectMatchTaskSettings()
    content.vb: Public Sub New
  overload: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  commentId: P:Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  id: MarkAsPerfectMatchAndLock
  parent: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings
  langs:
  - csharp
  - vb
  name: MarkAsPerfectMatchAndLock
  nameWithType: PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  fullName: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nIf true, all segments copied over from the reference files will be marked as &quot;PerfectMatch&quot; and will be locked.\nThis caters for the &quot;fully reviewed existing project&quot; scenario.\nIf false, the original segment properties will be preserved and the segment will not be locked.\nThis caters for the &quot;mid project update&quot; scenario, where the translator is halfway through a translation project, and the client sends all the source files again with a few tweaks in them.\n"
  syntax:
    content: public Setting<bool> MarkAsPerfectMatchAndLock { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Boolean}
    content.vb: Public ReadOnly Property MarkAsPerfectMatchAndLock As Setting(Of Boolean)
  overload: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.ProjectAutomation.Settings
  commentId: N:Sdl.ProjectAutomation.Settings
  isExternal: true
  name: Sdl.ProjectAutomation.Settings
  nameWithType: Sdl.ProjectAutomation.Settings
  fullName: Sdl.ProjectAutomation.Settings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.#ctor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.#ctor
  isExternal: true
  name: PerfectMatchTaskSettings
  nameWithType: PerfectMatchTaskSettings.PerfectMatchTaskSettings
  fullName: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.PerfectMatchTaskSettings
- uid: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  isExternal: true
  name: MarkAsPerfectMatchAndLock
  nameWithType: PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
  fullName: Sdl.ProjectAutomation.Settings.PerfectMatchTaskSettings.MarkAsPerfectMatchAndLock
- uid: Sdl.Core.Settings.Setting{System.Boolean}
  commentId: '!:Sdl.Core.Settings.Setting{System.Boolean}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<Boolean>
  nameWithType: Setting<Boolean>
  fullName: Sdl.Core.Settings.Setting<System.Boolean>
  nameWithType.vb: Setting(Of Boolean)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.Boolean)
  name.vb: Setting(Of Boolean)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Settings.Setting`1
  isExternal: true
  name: Setting<>
  nameWithType: Setting<>
  fullName: Sdl.Core.Settings.Setting<>
  nameWithType.vb: Setting(Of )
  fullName.vb: Sdl.Core.Settings.Setting(Of )
  name.vb: Setting(Of )
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
