### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  id: ExistingContentHandling
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  children:
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Preserve
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Replace
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.ThrowException
  langs:
  - csharp
  - vb
  name: ExistingContentHandling
  nameWithType: ExistingContentHandling
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  type: Enum
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nUsed by the <xref href=\"Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.SourceToTargetCopier\" data-throw-if-not-resolved=\"false\"></xref> to specify how existing\ncontent in a target segment should be processed.\n"
  syntax:
    content: public enum ExistingContentHandling
    content.vb: Public Enum ExistingContentHandling
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Replace
  commentId: F:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Replace
  id: Replace
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  langs:
  - csharp
  - vb
  name: Replace
  nameWithType: ExistingContentHandling.Replace
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Replace
  type: Field
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nCauses existing target content to be fully replaced with a copy of the source content.\n"
  syntax:
    content: Replace = 0
    return:
      type: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Preserve
  commentId: F:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Preserve
  id: Preserve
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  langs:
  - csharp
  - vb
  name: Preserve
  nameWithType: ExistingContentHandling.Preserve
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.Preserve
  type: Field
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nParagraphUnits with existing target content will be skipped, the target content remains unchanged.\n"
  syntax:
    content: Preserve = 1
    return:
      type: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.ThrowException
  commentId: F:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.ThrowException
  id: ThrowException
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  langs:
  - csharp
  - vb
  name: ThrowException
  nameWithType: ExistingContentHandling.ThrowException
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling.ThrowException
  type: Field
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nCauses an exception to be thrown if any existing target content is encountered.\n"
  syntax:
    content: ThrowException = 2
    return:
      type: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  isExternal: true
  name: ExistingContentHandling
  nameWithType: ExistingContentHandling
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.ExistingContentHandling
