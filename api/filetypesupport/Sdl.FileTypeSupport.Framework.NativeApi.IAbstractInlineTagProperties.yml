### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties
  id: IAbstractInlineTagProperties
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  children:
  - Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide
  - Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak
  - Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop
  langs:
  - csharp
  - vb
  name: IAbstractInlineTagProperties
  nameWithType: IAbstractInlineTagProperties
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nCommon tag properties specific to inline tags, i.e. tags that can be found inside (translatable) text.\n"
  syntax:
    content: public interface IAbstractInlineTagProperties
    content.vb: Public Interface IAbstractInlineTagProperties
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop
  id: IsWordStop
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties
  langs:
  - csharp
  - vb
  name: IsWordStop
  nameWithType: IAbstractInlineTagProperties.IsWordStop
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nDetermines whether the tag is considered to be a new word during segmentation. It also affects the way that the \ncaret moves when using word movement keyboard actions such as CTRL+LEFT ARROW and CTRL+RIGHT ARROW in editors. \n"
  example:
  - "\nDuring segmentation, if a tag has IsWordStop false then &quot;hello[tag]world[/tag]&quot; is considered to be one word - &quot;hello[tag]world[/tag]&quot; and\nif a tag has IsWordStop true then &quot;hello[tag]world[/tag]&quot; is considered to be two words - &quot;hello&quot; and &quot;[tag]world[/tag]&quot;.\n"
  syntax:
    content: bool IsWordStop { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsWordStop As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak
  id: IsSoftBreak
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties
  langs:
  - csharp
  - vb
  name: IsSoftBreak
  nameWithType: IAbstractInlineTagProperties.IsSoftBreak
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIndicates whether it is valid to break the line in front of this tag during word wrap. \n"
  remarks: "\n<p>\nMay be used by word wrapping algorithms in editors.\n</p>\n<p>This is <code>true</code> by default for all tag types.</p>\n"
  syntax:
    content: bool IsSoftBreak { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsSoftBreak As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide
  id: CanHide
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties
  langs:
  - csharp
  - vb
  name: CanHide
  nameWithType: IAbstractInlineTagProperties.CanHide
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIndicates whether the tag is allowed to be hidden during editing operations.\n"
  remarks: "\n<p>\nHidden tags can easily get deleted by mistake during editing operations.\nAlways set this to <code>false</code> for tags that represent important content that the\nuser should not delete unknowingly.\n</p>\n<p>\nTypically this is set to <code>true</code> for elements like tag pairs that represent pure\ncharacter formatting, without any other associated functionality - and only if the relevant\n<xref href=\"Sdl.FileTypeSupport.Framework.Formatting\" data-throw-if-not-resolved=\"false\"></xref> properties have been set for the tag, so that the user\ncan see what the character formatting actually looks like in the editor without any need to see the tags.\n</p>\n<p>\nSetting this to <code>true</code> does not necessarily mean that the tag will always be hidden.\nThis will be determined by the editor (i.e. the user may change this at runtime through a setting).\n</p>\n<p>This is <code>false</code> by default for all tag types.</p>\n"
  syntax:
    content: bool CanHide { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property CanHide As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.FileTypeSupport.Framework.NativeApi
  commentId: N:Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.NativeApi
  nameWithType: Sdl.FileTypeSupport.Framework.NativeApi
  fullName: Sdl.FileTypeSupport.Framework.NativeApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop
  isExternal: true
  name: IsWordStop
  nameWithType: IAbstractInlineTagProperties.IsWordStop
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsWordStop
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak
  isExternal: true
  name: IsSoftBreak
  nameWithType: IAbstractInlineTagProperties.IsSoftBreak
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.IsSoftBreak
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide
  isExternal: true
  name: CanHide
  nameWithType: IAbstractInlineTagProperties.CanHide
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IAbstractInlineTagProperties.CanHide
