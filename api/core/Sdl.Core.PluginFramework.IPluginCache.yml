### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.IPluginCache
  commentId: T:Sdl.Core.PluginFramework.IPluginCache
  id: IPluginCache
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.IPluginCache.GetPluginState(System.String)
  - Sdl.Core.PluginFramework.IPluginCache.Save
  - Sdl.Core.PluginFramework.IPluginCache.StorePluginState(Sdl.Core.PluginFramework.IPlugin)
  langs:
  - csharp
  - vb
  name: IPluginCache
  nameWithType: IPluginCache
  fullName: Sdl.Core.PluginFramework.IPluginCache
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nRepresents a plug-in cache, which is used to store plug-in state.\n"
  remarks: "\n<p>A default implementationm of this interface is available, <xref href=\"Sdl.Core.PluginFramework.XmlPluginCache\" data-throw-if-not-resolved=\"false\"></xref>: it stores plug-in state in an xml file.</p>\n"
  syntax:
    content: public interface IPluginCache
    content.vb: Public Interface IPluginCache
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.IPluginCache.GetPluginState(System.String)
  commentId: M:Sdl.Core.PluginFramework.IPluginCache.GetPluginState(System.String)
  id: GetPluginState(System.String)
  parent: Sdl.Core.PluginFramework.IPluginCache
  langs:
  - csharp
  - vb
  name: GetPluginState(String)
  nameWithType: IPluginCache.GetPluginState(String)
  fullName: Sdl.Core.PluginFramework.IPluginCache.GetPluginState(System.String)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets the plug-in state of the plug-in with the specified id.\n"
  syntax:
    content: PluginState GetPluginState(string pluginId)
    parameters:
    - id: pluginId
      type: System.String
      description: The id of the plug-in for which to get the state.
    return:
      type: Sdl.Core.PluginFramework.PluginState
      description: "A <xref href=\"Sdl.Core.PluginFramework.PluginState\" data-throw-if-not-resolved=\"false\"></xref> object containing the plug-in&apos;s state information. If no state \ninformation is found, a default state object is created."
    content.vb: Function GetPluginState(pluginId As String) As PluginState
  overload: Sdl.Core.PluginFramework.IPluginCache.GetPluginState*
- uid: Sdl.Core.PluginFramework.IPluginCache.StorePluginState(Sdl.Core.PluginFramework.IPlugin)
  commentId: M:Sdl.Core.PluginFramework.IPluginCache.StorePluginState(Sdl.Core.PluginFramework.IPlugin)
  id: StorePluginState(Sdl.Core.PluginFramework.IPlugin)
  parent: Sdl.Core.PluginFramework.IPluginCache
  langs:
  - csharp
  - vb
  name: StorePluginState(IPlugin)
  nameWithType: IPluginCache.StorePluginState(IPlugin)
  fullName: Sdl.Core.PluginFramework.IPluginCache.StorePluginState(Sdl.Core.PluginFramework.IPlugin)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nStores the state of the specified plug-in in the plug-in cache.\n"
  syntax:
    content: void StorePluginState(IPlugin plugin)
    parameters:
    - id: plugin
      type: Sdl.Core.PluginFramework.IPlugin
      description: The plug-in for which to store the state.
    content.vb: Sub StorePluginState(plugin As IPlugin)
  overload: Sdl.Core.PluginFramework.IPluginCache.StorePluginState*
- uid: Sdl.Core.PluginFramework.IPluginCache.Save
  commentId: M:Sdl.Core.PluginFramework.IPluginCache.Save
  id: Save
  parent: Sdl.Core.PluginFramework.IPluginCache
  langs:
  - csharp
  - vb
  name: Save()
  nameWithType: IPluginCache.Save()
  fullName: Sdl.Core.PluginFramework.IPluginCache.Save()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nSaves the plug-in cache.\n"
  remarks: This method is called automatically when the corresponding plug-in registry is disposed.
  syntax:
    content: void Save()
    content.vb: Sub Save
  overload: Sdl.Core.PluginFramework.IPluginCache.Save*
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Core.PluginFramework.IPluginCache.GetPluginState*
  commentId: Overload:Sdl.Core.PluginFramework.IPluginCache.GetPluginState
  isExternal: true
  name: GetPluginState
  nameWithType: IPluginCache.GetPluginState
  fullName: Sdl.Core.PluginFramework.IPluginCache.GetPluginState
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.PluginFramework.PluginState
  commentId: T:Sdl.Core.PluginFramework.PluginState
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: PluginState
  nameWithType: PluginState
  fullName: Sdl.Core.PluginFramework.PluginState
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.IPluginCache.StorePluginState*
  commentId: Overload:Sdl.Core.PluginFramework.IPluginCache.StorePluginState
  isExternal: true
  name: StorePluginState
  nameWithType: IPluginCache.StorePluginState
  fullName: Sdl.Core.PluginFramework.IPluginCache.StorePluginState
- uid: Sdl.Core.PluginFramework.IPlugin
  commentId: T:Sdl.Core.PluginFramework.IPlugin
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPlugin
  nameWithType: IPlugin
  fullName: Sdl.Core.PluginFramework.IPlugin
- uid: Sdl.Core.PluginFramework.IPluginCache.Save*
  commentId: Overload:Sdl.Core.PluginFramework.IPluginCache.Save
  isExternal: true
  name: Save
  nameWithType: IPluginCache.Save
  fullName: Sdl.Core.PluginFramework.IPluginCache.Save
